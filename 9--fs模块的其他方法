fs.existsSync(path)
  -检查一个文件是否存在

var isExists = fs.existsSync("a.mp3");
console.log(isExists);

--------------------------------------------------------

fs.stat(path, callback)
fs.statSync(path)
  -获取文件的状态
  
fs.stat("a.mp3", function (err, stat) {
  console.log(stat.size);
  //size 文件的大小
  //isFile() 是否是一个文件
  //isDirectory() 是否是一个文件夹（目录）
})

--------------------------------------------------------

fs.unlink(path, callback)
fs.unlinkSync(path)
  -删除文件
  
fs.unlinkSync("hello.txt")

--------------------------------------------------------

fs.readdir(path[, options], callback)
fs.readdirSync(path[, options])
  -读取一个目录的目录结构

fs.readdir(".", function (err, files) {
  if(!err){
    console.log(files);
  }
})

--------------------------------------------------------
fs.truncate(path, len, callback)
fs,truncateSync(path, len)
- 截断文件，将文件修改为指定的大小

fs.truncateSync("hello.txt",10);

--------------------------------------------------------

fs.mkdir(path[, mode], callback)
fs.mkdirSync(path[, mode])
- 创建一个目录

fs.mkdirSync("hello.txt");

--------------------------------------------------------

fs.rmdirSync("hello.txt")
- 删除一个目录

--------------------------------------------------------

fs.rename(oldPath,newPath, callback)
fs.renameSync(oldPath, newPath)
- 对文件进行重命名
- 参数：
    oldPath 旧的路径
    newPath 新的路径
    callback 回调函数

fs.rename("a.mp3", "b.mp3", function(err) {
  if(!err){
    console.log("修改成功~~~");
  }
});

--------------------------------------------------------

fs.watchFile(filename[, opotions], listener)
- 监视文件的修改
- 参数：
    filename 要监视的文件的名字
    options 配置选项
    listener 回调函数，当文件发生变化时，回调函数会执行
        在回调函数中会有两个参数：
            curr 当前文件的状态
            prev 修改前文件的状态
                - 这两个都是stats对象

fs.watchFile("hello.txt", {interval:1000}, prev) {
  console.log("文件发生变化~~~");
  console.log("修改前文件大小：" + prev.size);
  console.log("修改后文件大小：" + curr.size);
});

--------------------------------------------------------



