----------------------------------------------------------------------------------------------------------------------------
// 模块化
    在 Node.js 中，一个 js文件 就是一个模块
    在 Node.js 中，每一个 js文件 中的 js代码 都是独立运行在一个函数中，而不是全局作用域，所以一个模块中的变量和函数在其他模块中无法访问

    我们可以通过 exports 来向外暴露变量和方法
    只需要将需要暴露给外部的变量或方法设置为 exports 的属性即可

    向外部暴露属性或方法
    exports.x = "123";
    exports.fn = function () {

    };
------------------------------------------------------------------------------------------------------------------------------
// 引入其他模块
    在 node 中，通过 require() 函数来引入外部的模块
    require() 可以传递一个文件的路径作为参数，node 将会自动根据该路径来引入外部模块
    这里路径，如果使用相对路径，必须以 . 或 .. 开头

    使用 require() 引入模块以后，该函数会返回一个对象，这个对象代表的是引入的模块

    var md = require("路径");
    console.log(md);
------------------------------------------------------------------------------------------------------------------------------
我们使用 require() 引入外部模块时，使用的就是模块标识，我们可以通过模块标识来找到指定的模块
    模块分成两大类
        核心模块
            核心模块的标识就是，模块的名字
        文件模块
            用户自己创建的模块
            文件模块的标识就是文件的路径（绝对路径，相对路径）
                相对路径使用 . 或 .. 开头
------------------------------------------------------------------------------------------------------------------------------
var a = 10;

    在 node 中有一个全局对象 global ，它的作用和网页中 window 类似
        在全局中创建的变量都会作为 global 的属性保存
        在全局中创建的函数都会作为 global 的方法保存

    当 node 在执行模块中的代码时，它会先在代码的最顶部，添加如下代码
        function (exports, require, module, __filename, __dirname) {
    在代码底部添加如下代码
        }

// console.log(global.a);

console.log(arguments.callee + "");
----------------------------------------------------------------------------------------------------------------------------
    exports
        该对象用来将变量或函数暴露到外部

    require
        函数，用来引入外部的模块

    module
        module 代表的时当前模块本身
        exports 就是 module 的属性
        既可以使用 exports 导出，也可以使用 module.exports 导出

    __filename
        当前模块的完整路径

    __dirname
        当前模块所在文件夹的完整路径

    exports 和 module.exports   
        通过 exports 只能使用 . 的方式来向外暴露内部变量
            exports.xxx = xxx
----------------------------------------------------------------------------------------------------------------------------
    而 moudle.exports 既可以通过 . 的形式，也可以直接赋值
        moduke.exports.xxx = this.xxx
        module.exports = { }
        ----------------------------------------------------------------------------------------------------------------------------
